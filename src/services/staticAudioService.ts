import ttsService, { TTSOptions } from './ttsService';
import logger from '../utils/logger';
import cloudinaryService from './cloudinaryService';
import config from '../config';

export interface StaticAudioTexts {
  welcome: string;
  processing: string;
  error: string;
  goodbye: string;
  noRecording: string;
  wait: string;
  directRecording: string;
  followUpRecording: string;
  postAIMenu: string;
  noInputMessage: string;
  transfer: string;
}

class StaticAudioService {
  private staticTexts: Record<string, StaticAudioTexts> = {
    en: {
      welcome: "Welcome to Agrocist, your trusted livestock farming partner. Press 1 for English, 2 for Yoruba, 3 for Hausa, or 4 for Igbo.",
      processing: "Thank you for your question. Agrocist is analyzing your concern.",
      error: "I'm sorry, I didn't understand that. Let me take you back to the main menu.",
      goodbye: "Thank you for using Agrocist. Have a great day!",
      noRecording: "I didn't hear your recording. Please try again and speak after the beep.",
      wait: "Just a moment, processing your request.",
      directRecording: "You have selected English. Please describe your livestock concern. Speak clearly after the beep and press hash when done.",
      followUpRecording: "Please ask your next question or describe another livestock concern. Speak clearly after the beep and press hash when done.",
      postAIMenu: "Do you have any other concerns? Press 1 to ask another question, press 2 to speak with a human expert, press 3 to go back to main menu, or press 0 to end the call.",
      noInputMessage: "We did not receive your selection. Let me repeat the options.",
      transfer: "Please hold while I connect you to one of our veterinary experts."
    },
    yo: {
      welcome: "·∫∏ k√°√†b·ªçÃÄ s√≠ Agrocist, al√°b√°·π£ep·ªçÃÄ √≤we ·∫πranko t√≠ ·∫π l√® gb·∫πÃÅk·∫πÃÄl√©. ·∫∏ t·∫πÃÅ ·ªçÃÄkan f√∫n G·∫πÃÄ·∫πÃÅs√¨, m√©j√¨ f√∫n Yor√πb√°, m·∫πÃÅta f√∫n Hausa, t√†b√≠ m·∫πÃÅrin f√∫n Igbo.",
      processing: "A d√∫p·∫πÃÅ f√∫n √¨b√©√®r√® y√≠n. Agrocist ≈Ñ ·π£e √¨t√∫pal·∫πÃÄ √¨·π£√≤ro y√≠n.",
      error: "M√° b√≠n√∫, k√≤ y√© mi ohun t√≠ ·∫π s·ªç. ·∫∏ j·∫πÃÅ k√≠ n gb√© y√≠n pad√† s√≠ √†t√≤j·ªç √†k·ªçÃÅk·ªçÃÅ.",
      goodbye: "A d√∫p·∫πÃÅ f√∫n lilo Agrocist. ·∫∏ n√≠ ·ªçj·ªçÃÅ t√≠ √≥ d√°ra!",
      noRecording: "Mi √≤ gb·ªçÃÅ √¨gb√≥h√πn y√≠n. ·∫∏ j·ªçÃÄw·ªçÃÅ gb√¨y√†nj√∫ l·∫πÃÅ·∫πÃÄkan si, k√≠ ·∫π s√¨ s·ªçÃÄr·ªçÃÄ l·∫πÃÅy√¨n √¨r√≥ √†l√°m·ªçÃÅ.",
      wait: "·∫∏ d√∫r√≥ d√≠·∫πÃÄ, a ≈Ñ ·π£e √¨b√©√®r√® y√≠n.",
      directRecording: "·∫∏ ti yan √àd√® Yor√πb√°. ·∫∏ s·ªç √¨·π£√≤ro ·∫πranko y√≠n kedere l·∫πÃÅy√¨n √¨r√≥ √†l√°m·ªçÃÅ (beep), k√≠ ·∫π s√¨ t·∫πÃÅ hash n√≠gb√† t√≠ ·∫π b√° par√≠.",
      followUpRecording: "·∫∏ b√©√®r√® √¨b√©√®r√® y√≠n t√≥k√†n t√†b√≠ ·∫π s·ªç √¨·π£√≤ro ·∫πranko m√¨√≠r√†n. ·∫∏ s·ªçÃÄr·ªçÃÄ kedere l·∫πÃÅy√¨n √¨r√≥ √†l√°m·ªçÃÅ (beep), k√≠ ·∫π s√¨ t·∫πÃÅ hash n√≠gb√† t√≠ ·∫π b√° par√≠.",
      postAIMenu: "·π¢√© ·∫π n√≠ √¨·π£√≤ro m√¨√≠r√†n? ·∫∏ t·∫πÃÅ ·ªçÃÄkan l√°ti b√©√®r√® √¨b√©√®r√® m√¨√≠r√†n, ·∫π t·∫πÃÅ m√©j√¨ l√°ti b√° am·ªçÃÄr√†n s·ªçÃÄr·ªçÃÄ, ·∫π t·∫πÃÅ m·∫πÃÅta l√°ti pad√† s√≠ √†t√≤j·ªç √†k·ªçÃÅk·ªçÃÅ, t√†b√≠ ·∫π t·∫πÃÅ ·ªçÃÄf√† l√°ti par√≠ √¨p√® n√°√†.",
      noInputMessage: "A k√≤ gb·ªçÃÅ √†·π£√†y√†n y√≠n. ·∫∏ j·∫πÃÅ k√≠ n t√∫n √†w·ªçn √†·π£√†y√†n n√°√† s·ªç.",
      transfer: "·∫∏ d√∫r√≥ s√≠b·∫πÃÄ k√≠ n so y√≠n m·ªçÃÅ ·ªçÃÄkan l√°ra √†w·ªçn am·ªçÃÄr√†n on√≠w√≤s√†n ·∫πranko wa."
    },
    ha: {
      welcome: "Maraba da zuwa Agrocist, abokin gona na kiwo da za ku iya dogara da shi. Danna 1 don Turanci, 2 don Yoruba, 3 don Hausa, ko 4 don Igbo.",
      processing: "Na gode da tambayar ku. Agrocist yana nazarin damuwar ku.",
      error: "Yi hakuri, ban fahimci hakan ba. Bari in mayar da ku zuwa babban menu.",
      goodbye: "Na gode da amfani da Agrocist. Ku yi kyakkyawan rana!",
      noRecording: "Ban ji rikodin ku ba. Don Allah ku sake gwadawa kuma ku yi magana bayan sautin.",
      wait: "Don Allah ku …óan jira, muna aiwatar da bu∆ôatarku.",
      directRecording: "Kun za…ìi Hausa. Don Allah ku bayyana matsalar dabbobinku. Ku yi magana a bayyane bayan sautin (beep), sannan ku danna hash idan kun gama.",
      followUpRecording: "Don Allah ku yi wata tambaya ko ku bayyana wata matsalar dabbobi. Ku yi magana a bayyane bayan sautin (beep), sannan ku danna hash idan kun gama.",
      postAIMenu: "Kana da wasu matsaloli? Danna 1 don yin wata tambaya, danna 2 don magana da ∆ôwararren likita, danna 3 don komawa babban menu, ko danna 0 don kammala kiran.",
      noInputMessage: "Ba mu kar…ìi za…ìin ku ba. Bari in sake maimaita za…ìukan.",
      transfer: "Don Allah ku jira yayin da nake ha…óa ku da …óaya daga cikin ∆ôwararrun likitocin dabbobinmu."
    },
    ig: {
      welcome: "Nn·ªç·ªç na Agrocist, onye enyi g·ªã n'·ªçr·ª• an·ª•man·ª• ·ªã nwere ike ·ªãdabere na ya. P·ªãa 1 maka Bekee, 2 maka Yoruba, 3 maka Hausa, ma ·ªç b·ª• 4 maka Igbo.",
      processing: "Daal·ª• maka aj·ª•j·ª• g·ªã. Agrocist na-enyocha nsogbu g·ªã.",
      error: "Ewela iwe, agh·ªçtagh·ªã m ihe ·ªã kwuru. Ka m laghachi g·ªã na menu izizi.",
      goodbye: "Daal·ª• maka iji Agrocist. Nwee ·ª•b·ªçch·ªã ·ªçma!",
      noRecording: "An·ª•gh·ªã m ndek·ªç g·ªã. Biko gbal·ªãa ·ªçz·ªç ma kwuo okwu mgbe ·ª•da ah·ª• gas·ªãr·ªã.",
      wait: "Chere ntak·ªãr·ªã, any·ªã na-edozi ihe ·ªã ch·ªçr·ªç.",
      directRecording: "·ªäh·ªçr·ªçla Igbo. Biko k·ªçwaa nsogbu an·ª•man·ª• g·ªã. Kwuo okwu n'·ª•z·ªç doro anya mgbe ·ª•da ah·ª• (beep) gas·ªãr·ªã, wee p·ªãa hash mgbe ·ªã mechara.",
      followUpRecording: "Biko j·ª•·ªç aj·ª•j·ª• g·ªã ·ªçz·ªç ma ·ªç b·ª• k·ªçwaa nsogbu an·ª•man·ª• ·ªçz·ªç. Kwuo okwu n'·ª•z·ªç doro anya mgbe ·ª•da ah·ª• (beep) gas·ªãr·ªã, wee p·ªãa hash mgbe ·ªã mechara.",
      postAIMenu: "·ªä nwere nsogbu nd·ªã ·ªçz·ªç? P·ªãa 1 iji j·ª•·ªç aj·ª•j·ª• ·ªçz·ªç, p·ªãa 2 iji kwuo okwu na ·ªçkachamara mmad·ª•, p·ªãa 3 iji laghachi na menu izizi, ma ·ªç b·ª• p·ªãa 0 iji kw·ª•s·ªã oku a.",
      noInputMessage: "Any·ªã anatabegh·ªã nh·ªçr·ªç g·ªã. Ka m kwughachi nh·ªçr·ªç nd·ªã ah·ª•.",
      transfer: "Biko chere ka m jik·ªç·ªç g·ªã na otu n'ime nd·ªã ·ªçkachamara veterinary any·ªã."
    }
  };

  private staticAudioUrls: Map<string, string> = new Map();

  /**
   * Pre-generate all static audio files at startup
   */
  async preGenerateStaticAudio(): Promise<void> {
    logger.info('üéµ Starting static audio pre-generation...');
    const startTime = Date.now();
    let successCount = 0;
    let failedCount = 0;

    const languages: Array<'en' | 'yo' | 'ha' | 'ig'> = ['en', 'yo', 'ha', 'ig'];
    
    for (const language of languages) {
      logger.info(`üéµ Generating static audio for ${language}...`);
      const texts = this.staticTexts[language];
      
      if (!texts) {
        logger.error(`‚ùå No texts found for language: ${language}`);
        continue;
      }
      
      for (const [key, text] of Object.entries(texts)) {
        try {
          const options: TTSOptions = { language };
          const audioUrl = await ttsService.generateSpeech(text as string, options);
          
          // Store with key pattern: language_textKey (e.g., "en_welcome", "yo_processing")
          const cacheKey = `${language}_${key}`;
          
          // If Cloudinary is enabled, check for existing static files with proper naming
          let finalUrl = audioUrl;
          if (cloudinaryService.isEnabled()) {
            // Use the proper static naming pattern: static_welcome_en, static_processing_yo, etc.
            const staticPublicId = `static_${key}_${language}`;
            const existsOnCloudinary = await cloudinaryService.fileExists(staticPublicId);
            
            if (existsOnCloudinary) {
              // File already exists, use the existing URL
              const existingCloudinaryUrl = cloudinaryService.getOptimizedUrl(staticPublicId);
              if (existingCloudinaryUrl) {
                finalUrl = existingCloudinaryUrl;
                logger.info(`‚ôªÔ∏è Using existing static Cloudinary file: ${cacheKey}`);
              }
            } else {
              // File doesn't exist, upload it with proper static naming
              const cloudinaryUrl = await this.uploadStaticToCloudinary(text as string, language, key);
              if (cloudinaryUrl) {
                finalUrl = cloudinaryUrl;
                logger.info(`üì§ Uploaded new static audio to Cloudinary: ${cacheKey}`);
              }
            }
          }
          
          this.staticAudioUrls.set(cacheKey, finalUrl);
          
          successCount++;
          logger.info(`‚úÖ Generated ${cacheKey}: ${(text as string).substring(0, 50)}...`);
        } catch (error) {
          failedCount++;
          logger.error(`‚ùå Failed to generate ${language}_${key}:`, error);
        }
      }
    }

    const totalTime = Date.now() - startTime;
    logger.info(`üéµ Static audio pre-generation completed in ${totalTime}ms`);
    logger.info(`‚úÖ Success: ${successCount}, ‚ùå Failed: ${failedCount}, Total: ${successCount + failedCount}`);
  }

  /**
   * Get pre-generated static audio URL
   */
  getStaticAudioUrl(language: 'en' | 'yo' | 'ha' | 'ig', textKey: keyof StaticAudioTexts): string | null {
    const cacheKey = `${language}_${textKey}`;
    return this.staticAudioUrls.get(cacheKey) || null;
  }

  /**
   * Get static text for fallback
   */
  getStaticText(language: 'en' | 'yo' | 'ha' | 'ig', textKey: keyof StaticAudioTexts): string {
    const languageTexts = this.staticTexts[language];
    const englishTexts = this.staticTexts.en;
    
    return languageTexts?.[textKey] || englishTexts?.[textKey] || '';
  }

  /**
   * Upload static audio file to Cloudinary directly from TTS buffer
   */
  private async uploadStaticToCloudinary(
    text: string, 
    language: string, 
    textKey: string
  ): Promise<string | null> {
    try {
      // Use simple static naming pattern: static_welcome_en, static_processing_yo, etc.
      const publicId = `static_${textKey}_${language}`;
      
      // Generate TTS audio buffer directly (don't save to disk)
      const audioBuffer = await this.generateTTSBuffer(text, language as 'en' | 'yo' | 'ha' | 'ig');
      if (!audioBuffer) {
        logger.warn(`Failed to generate TTS buffer for static audio: ${language}_${textKey}`);
        return null;
      }
      
      const cloudinaryResult = await cloudinaryService.uploadAudioBuffer(audioBuffer, {
        publicId,
        folder: `${config.cloudinary.folder}/static`
      });
      
      if (cloudinaryResult) {
        logger.info(`üì§ Uploaded static audio directly to Cloudinary: ${cloudinaryResult.secureUrl}`);
        return cloudinaryResult.secureUrl;
      }
    } catch (error) {
      logger.warn(`Failed to upload static audio to Cloudinary: ${language}_${textKey}`, error);
    }
    
    return null;
  }

  /**
   * Generate TTS audio buffer without saving to disk
   */
  private async generateTTSBuffer(text: string, language: 'en' | 'yo' | 'ha' | 'ig'): Promise<Buffer | null> {
    try {
      const axios = require('axios');
      const FormData = require('form-data');
      
      // Reuse TTS authentication and generation logic
      const ttsService = (await import('./ttsService')).default;
      const token = await ttsService.authenticateDSN();
      
      if (!token) {
        throw new Error('Failed to authenticate with DSN API');
      }

      // Voice configurations
      const voiceConfigs: Record<string, any> = {
        en: { voiceId: 'lucy', language: 'en' },
        yo: { voiceId: 'sade', language: 'yo' },
        ha: { voiceId: 'zainab', language: 'ha' },
        ig: { voiceId: 'amara', language: 'ig' }
      };

      const voiceConfig = voiceConfigs[language];
      if (!voiceConfig) {
        throw new Error(`No voice configuration found for language: ${language}`);
      }

      // Create form data for the request
      const formData = new FormData();
      formData.append('text', text);
      formData.append('language', voiceConfig.language);
      formData.append('voice', voiceConfig.voiceId);
      formData.append('format', 'mp3');
      formData.append('quality', 'medium');
      formData.append('encoding', 'mp3_64');

      // Make request to DSN TTS API
      const response = await axios({
        method: 'POST',
        url: `${config.dsn.baseUrl}/api/v1/ai/spitch/text-to-speech`,
        data: formData,
        headers: {
          ...formData.getHeaders(),
          'Authorization': `Bearer ${token}`
        },
        responseType: 'arraybuffer'
      });

      return Buffer.from(response.data);
    } catch (error) {
      logger.error('Error generating TTS buffer:', error);
      return null;
    }
  }

  /**
   * Get cache statistics
   */
  getCacheStats(): { 
    size: number; 
    keys: string[];
    cloudinaryEnabled: boolean;
  } {
    return {
      size: this.staticAudioUrls.size,
      keys: Array.from(this.staticAudioUrls.keys()),
      cloudinaryEnabled: cloudinaryService.isEnabled()
    };
  }
}

export default new StaticAudioService();