import logger from '../utils/logger';
import ttsService, { TTSOptions } from './ttsService';

/**
 * Audio Pre-warming Service
 * Pre-generates frequently used audio prompts on startup for instant playback
 */
class AudioPrewarmService {
  private isWarmedUp: boolean = false;

  /**
   * Common prompts that should be pre-generated for all languages
   */
  private readonly commonPrompts = {
    en: [
      // CRITICAL: Main welcome message (plays on incoming call)
      "Welcome to Agrocist, your trusted livestock farming partner. Press 1 for English, 2 for Yoruba, or 3 for Hausa.",
      // Recording prompts for each language
      "You have selected English. Please describe your livestock concern. Speak clearly after the beep and press hash when done.",
      // Processing messages
      "Thank you for your question. Agrocist is analyzing your concern. Please wait a moment for your response.",
      "Just a moment, processing your request.",
      // Post-AI menu
      "Would you like to speak with a human veterinary expert? Press 1 to speak with an expert, or press 0 to end the call.",
      // Goodbye
      "Thank you for using Agrocist. Have a great day!",
      // Error messages
      "I'm sorry, I didn't understand that. Let me take you back to the main menu."
    ],
    yo: [
      "·∫∏ ti yan √àd√® Yor√πb√°. ·∫∏ s·ªç √¨·π£√≤ro ·∫πranko y√≠n kedere l·∫πÃÅy√¨n √¨r√≥ √†l√°m·ªçÃÅ (beep), k√≠ ·∫π s√¨ t·∫πÃÅ hash n√≠gb√† t√≠ ·∫π b√° par√≠.",
      "A d√∫p·∫πÃÅ f√∫n √¨b√©√®r√® y√≠n. Agrocist ≈Ñ ·π£e √¨t√∫pal·∫πÃÄ √¨·π£√≤ro y√≠n. ·∫∏ d√∫r√≥ d√≠·∫πÃÄ f√∫n √¨d√°h√πn y√≠n.",
      "·π¢√© ·∫π f·∫πÃÅ b√° dokita on√≠w√≤s√†n ·∫πranko s·ªçÃÄr·ªçÃÄ? ·∫∏ t·∫πÃÅ ·ªçÃÄkan l√°ti b√° am·ªçÃÄr√†n s·ªçÃÄr·ªçÃÄ, t√†b√≠ ·∫π t·∫πÃÅ ·ªçÃÄf√† l√°ti par√≠ √¨p√® n√°√†.",
      "A d√∫p·∫πÃÅ f√∫n lilo Agrocist. ·∫∏ n√≠ ·ªçj·ªçÃÅ t√≠ √≥ d√°ra!",
      "M√° b√≠n√∫, k√≤ y√© mi ohun t√≠ ·∫π s·ªç. ·∫∏ j·∫πÃÅ k√≠ n gb√© y√≠n pad√† s√≠ √†t√≤j·ªç √†k·ªçÃÅk·ªçÃÅ.",
      "·∫∏ d√∫r√≥ d√≠·∫πÃÄ, a ≈Ñ ·π£e √¨b√©√®r√® y√≠n."
    ],
    ha: [
      "Kun za…ìi Hausa. Don Allah ku bayyana matsalar dabbobinku. Ku yi magana a bayyane bayan sautin (beep), sannan ku danna hash idan kun gama.",
      "Na gode da tambayar ku. Agrocist yana nazarin damuwar ku. Don Allah ku jira na …óan lokaci don amsar ku.",
      "Kana son yin magana da ∆ôwararren likitan dabbobi? Danna …óaya don yin magana da ∆ôwararre, ko danna sifili don kammala kiran.",
      "Na gode da amfani da Agrocist. Ku yi kyakkyawan rana!",
      "Yi hakuri, ban fahimci hakan ba. Bari in mayar da ku zuwa babban menu.",
      "Don Allah ku …óan jira, muna aiwatar da bu∆ôatarku."
    ],
    ig: [
      "·ªäh·ªçr·ªçla Igbo. Biko k·ªçwaa nsogbu an·ª•man·ª• g·ªã. Kwuo okwu n'·ª•z·ªç doro anya mgbe ·ª•da ah·ª• (beep) gas·ªãr·ªã, wee p·ªãa hash mgbe ·ªã mechara.",
      "Daal·ª• maka aj·ª•j·ª• g·ªã. Agrocist na-enyocha nsogbu g·ªã. Biko chere ntak·ªãr·ªã maka nzaghachi g·ªã.",
      "·ªä ch·ªçr·ªç ikwu okwu na ·ªçkachamara veterinary mmad·ª•? P·ªãa 1 iji kwuo okwu na ·ªçkachamara, ma ·ªç b·ª• p·ªãa 0 iji kw·ª•s·ªã oku a.",
      "Daal·ª• maka iji Agrocist. Nwee ·ª•b·ªçch·ªã ·ªçma!",
      "Ewela iwe, agh·ªçtagh·ªã m ihe ·ªã kwuru. Ka m laghachi g·ªã na menu izizi.",
      "Biko chere ntak·ªãr·ªã, any·ªã na-edozi ihe ·ªã ch·ªçr·ªç."
    ]
  };

  /**
   * Pre-generate all common prompts for faster playback
   */
  async prewarmAudio(): Promise<void> {
    if (this.isWarmedUp) {
      logger.info('Audio already pre-warmed, skipping...');
      return;
    }

    logger.info('üî• Starting audio pre-warming process...');
    const startTime = Date.now();

    const languages: Array<'en' | 'yo' | 'ha' | 'ig'> = ['en', 'yo', 'ha', 'ig'];
    let successCount = 0;
    let failCount = 0;

    // Generate all prompts in parallel for maximum speed
    const allPromises: Promise<void>[] = [];

    for (const language of languages) {
      const prompts = this.commonPrompts[language];
      for (const prompt of prompts) {
        const promise = this.generatePrompt(prompt, language)
          .then(() => {
            successCount++;
            logger.debug(`‚úÖ Pre-warmed (${language}): ${prompt.substring(0, 50)}...`);
          })
          .catch((error) => {
            failCount++;
            logger.warn(`‚ùå Failed to pre-warm (${language}): ${prompt.substring(0, 50)}...`, error);
          });
        allPromises.push(promise);
      }
    }

    // Wait for all pre-warming to complete
    await Promise.allSettled(allPromises);

    const totalTime = Date.now() - startTime;
    this.isWarmedUp = true;

    logger.info(`üî• Audio pre-warming completed in ${totalTime}ms`);
    logger.info(`‚úÖ Success: ${successCount}, ‚ùå Failed: ${failCount}, Total: ${successCount + failCount}`);
  }

  /**
   * Generate a single prompt
   */
  private async generatePrompt(text: string, language: 'en' | 'yo' | 'ha' | 'ig'): Promise<void> {
    const options: TTSOptions = { language };
    await ttsService.generateSpeech(text, options);
  }

  /**
   * Check if audio has been pre-warmed
   */
  isPrewarmed(): boolean {
    return this.isWarmedUp;
  }

  /**
   * Pre-warm specific prompt on-demand
   */
  async prewarmSpecific(text: string, language: 'en' | 'yo' | 'ha' | 'ig'): Promise<void> {
    try {
      await this.generatePrompt(text, language);
      logger.info(`üî• On-demand pre-warm completed for (${language}): ${text.substring(0, 50)}...`);
    } catch (error) {
      logger.warn(`Failed to pre-warm on-demand (${language}): ${text.substring(0, 50)}...`, error);
    }
  }
}

export default new AudioPrewarmService();
